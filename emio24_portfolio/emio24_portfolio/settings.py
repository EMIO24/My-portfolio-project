"""
Django settings for emio24_portfolio project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path # Python 3.4+ module for object-oriented filesystem paths
import os                 # Standard library module for interacting with the operating system
import environ            # Third-party library to manage environment variables easily
import dj_database_url    # Third-party library to parse database URLs into Django's DATABASES config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR represents the root of your Django project (where manage.py is).
BASE_DIR = Path(__file__).resolve().parent.parent


# -----------------------------------------------------------------------------
# Core Settings & Environment Variable Management (Crucial for PaaS)
# -----------------------------------------------------------------------------

# Initialize django-environ: This creates an Env object which will read environment variables.
env = environ.Env(
    # Define default values and expected types for environment variables.
    # These defaults are used IF the variable is NOT found in the system's environment
    # or in the local .env file. This is crucial for local development fallback.
    DEBUG=(bool, False), # By default, DEBUG is False (safe for production)
    SECRET_KEY=(str, 'your-insecure-default-secret-key-for-local-dev-only'), # Fallback for local testing. CHANGE THIS!
    DATABASE_URL=(str, 'sqlite:///db.sqlite3'), # Default to SQLite for local development.
    # These are for your custom superuser creation command (read from Render's env vars)
    DJANGO_SUPERUSER_USERNAME=(str, ''),
    DJANGO_SUPERUSER_EMAIL=(str, ''),
    DJANGO_SUPERUSER_PASSWORD=(str, ''),
)

# Attempt to read environment variables from a .env file during local development.
# Render (and other PaaS) will NOT use this .env file; they inject variables directly.
if os.path.exists(BASE_DIR / '.env'):
    environ.Env.read_env(str(BASE_DIR / '.env'))
    # print("DEBUG: Loaded .env file.") # Uncomment for local debugging

# SECURITY WARNING: keep the secret key used in production secret!
# This pulls the SECRET_KEY from the environment variable (either from Render or local .env).
# This is a critical security measure.
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG mode is controlled by the 'DEBUG' environment variable.
# It MUST be 'False' in production for security, performance, and proper static/media serving.
DEBUG = env('DEBUG')

# Define allowed hosts that your Django application will respond to.
# This prevents HTTP Host header attacks.
# For PaaS like Render:
# - '*' is a common wildcard to allow Render's dynamic hostnames. Render handles
#   routing and security at its load balancer level.
# - For stricter control, you could list your specific Render subdomain
#   (e.g., 'your-app-name.onrender.com') in Render's environment variables
#   for ALLOWED_HOSTS.
ALLOWED_HOSTS = ['*']


# -----------------------------------------------------------------------------
# Application Definition
# -----------------------------------------------------------------------------

# List of Django applications enabled for your project.
# The order can sometimes matter for middleware or template loading.
INSTALLED_APPS = [
    'django.contrib.admin', # Django's built-in administration site
    'django.contrib.auth', # Authentication system
    'django.contrib.contenttypes', # Content types framework (allows permissions per model)
    'django.contrib.sessions', # Session framework
    'django.contrib.messages', # Messages framework (for temporary messages)
    'django.contrib.staticfiles', # Manages static files (CSS, JS, images)
    'portfolio', # Your custom portfolio app
    # Whitenoise: Essential for serving static files in production on PaaS.
    # `runserver_nostatic` prevents Django's dev server from serving static files,
    # letting Whitenoise handle it even locally (closer to prod behavior).
    'whitenoise.runserver_nostatic',
    'whitenoise', # The main Whitenoise app
]

# List of middleware classes that process requests and responses.
# Order is important as they execute in order from top to bottom for requests,
# and reverse order for responses.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', # Handles various security features
    'whitenoise.middleware.WhiteNoiseMiddleware', # MUST be placed early to serve static files efficiently
    'django.contrib.sessions.middleware.SessionMiddleware', # Manages user sessions
    'django.middleware.common.CommonMiddleware', # Handles common functionalities like URL rewriting, etc.
    'django.middleware.csrf.CsrfViewMiddleware', # Protects against Cross-Site Request Forgery (CSRF)
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Associates users with requests
    'django.contrib.messages.middleware.MessageMiddleware', # Manages temporary messages (e.g., form success)
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # Prevents clickjacking attacks
]

# The Python path to your projects's root URLconf module.
ROOT_URLCONF = 'emio24_portfolio.urls'

# -----------------------------------------------------------------------------
# Templates Configuration
# -----------------------------------------------------------------------------

# Defines how Django loads and renders templates.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # Specifies the template engine
        'DIRS': [BASE_DIR / 'templates'], # Looks for templates in the project-level 'templates' directory
        'APP_DIRS': True, # Tells Django to look for templates in `templates/` directories inside each app
        'OPTIONS': {
            'context_processors': [ # Functions that add data to the template context
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# The Python path to your project's WSGI application callable.
# WSGI (Web Server Gateway Interface) is a standard for Python web applications.
# Gunicorn uses this to communicate with your Django app.
WSGI_APPLICATION = 'emio24_portfolio.wsgi.application'


# -----------------------------------------------------------------------------
# Database Configuration
# -----------------------------------------------------------------------------
# This is configured to use the DATABASE_URL environment variable.
# Render automatically provides this for its PostgreSQL databases (e.g., 'postgres://user:pass@host:port/dbname').
# `dj_database_url.config()` parses this URL into Django's dictionary format.
# Locally, it will fall back to the default specified in env() (e.g., SQLite or your local PostgreSQL/MySQL from .env).
DATABASES = {
    'default': dj_database_url.config(
        default=env('DATABASE_URL'), # Pulls DATABASE_URL from environment or .env
        conn_max_age=600, # Max age of database connections (in seconds) for connection pooling. Recommended for production.
        conn_health_checks=True, # Recommended for production to ensure connections are healthy.
    )
}


# -----------------------------------------------------------------------------
# Password Validation
# -----------------------------------------------------------------------------

# Validators that check the strength of user passwords.
AUTH_PASSWORD_VALIDATORS = [
    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]


# -----------------------------------------------------------------------------
# Internationalization
# -----------------------------------------------------------------------------

LANGUAGE_CODE = 'en-us' # Default language for your site
TIME_ZONE = 'Africa/Lagos' # Your specific timezone. Crucial for datetime handling.
USE_I18N = True # Enable Django's internationalization system
USE_TZ = True # Enable timezone support (Django stores datetimes in UTC and converts)


# -----------------------------------------------------------------------------
# Static and Media Files Configuration
# -----------------------------------------------------------------------------

# URL prefix for static files (CSS, JavaScript, Images)
# When your site is deployed, files will be accessed via /static/your.css
STATIC_URL = 'static/'

# Absolute path to the directory where `collectstatic` will gather all static files for production.
# This directory should be empty in your Git repo and populated during deployment.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# List of additional directories where Django will look for static files during development
# (e.g., your project's main 'static/' folder for common assets like hero-bg.jpg).
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# URL prefix for media files (user-uploaded content)
# When your site is deployed, uploaded files will be accessed via /media/your_image.jpg
MEDIA_URL = '/media/'

# Absolute path to the directory where user-uploaded files will be stored.
# IMPORTANT: Render's free tier for web services does NOT provide persistent storage
# for MEDIA_ROOT. Files uploaded via admin will be lost on service restarts/deploys.
# For persistent user uploads, you MUST use cloud storage (e.g., AWS S3, Google Cloud Storage)
# integrated with `django-storages`. For a portfolio, you might just use direct image URLs
# in your admin content for project images instead of uploading.
MEDIA_ROOT = BASE_DIR / 'mediafiles' # Using Path object for consistency.


# -----------------------------------------------------------------------------
# Default Primary Key Field Type
# -----------------------------------------------------------------------------

# The type of primary key field to use for models that don't explicitly specify one.
# `BigAutoField` is recommended for new projects.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# -----------------------------------------------------------------------------
# Production Security Settings (Enabled when DEBUG is False)
# These settings enhance the security of your deployed application.
# -----------------------------------------------------------------------------
if not DEBUG:
    # Whitenoise Storage: Essential for serving static files directly from Gunicorn in production.
    # It compresses files (e.g., CSS, JS) and adds appropriate caching headers.
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

    # Browser Security Headers: Helps protect against common web vulnerabilities.
    SECURE_BROWSER_XSS_FILTER = True      # Prevents cross-site scripting (XSS) attacks by forcing browser XSS filters.
    SECURE_CONTENT_TYPE_NOSNIFF = True    # Prevents browsers from "sniffing" (guessing) content types.
    X_FRAME_OPTIONS = 'DENY'              # Prevents clickjacking attacks by forbidding embedding your site in iframes.

    # Cookie Security: Ensures cookies are sent securely over HTTPS only.
    CSRF_COOKIE_SECURE = True   # CSRF (Cross-Site Request Forgery) cookie sent only over HTTPS.
    SESSION_COOKIE_SECURE = True # Session cookie sent only over HTTPS.

    # HTTPS Redirection: Redirects all HTTP traffic to HTTPS.
    # Render often handles this at their load balancer level, but it's safe to have here as a fallback.
    SECURE_SSL_REDIRECT = True

    # HTTP Strict Transport Security (HSTS): Tells browsers to always use HTTPS for your domain.
    # This improves security and performance. Only enable once HTTPS is fully working.
    SECURE_HSTS_SECONDS = 31536000        # Max age of HSTS policy (1 year = 31,536,000 seconds).
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True # Apply HSTS to all subdomains as well.
    SECURE_HSTS_PRELOAD = True            # Allows your domain to be added to browsers' HSTS preload lists.

    # Logging Configuration for Production:
    # This example configures basic logging to the console, which Render captures and displays in its logs.
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False, # Don't disable existing loggers (e.g., Django's default logging)
        'handlers': {
            'console': { # Defines a 'console' handler that prints to standard error.
                'class': 'logging.StreamHandler',
            },
        },
        'loggers': { # Specific loggers to configure.
            'django': { # Django's built-in logger
                'handlers': ['console'],
                'level': 'INFO', # Log messages at INFO level and above.
                'propagate': False, # Prevent messages from being handled by the root logger also.
            },
            'emio24_portfolio': { # Your project's specific logger (adjust name if different)
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False, # Important: Set to False to avoid duplicate logs if root logger also handles.
            },
        },
        'root': { # Configuration for the root logger.
            'handlers': ['console'],
            'level': 'WARNING', # Default logging level for other modules/apps.
        },
    }

